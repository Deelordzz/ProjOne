#include <Arduino.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

#define NUMFLAKES     10

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire);

#define LOGO_HEIGHT   64  
#define LOGO_WIDTH    128
#define XPOS   0 // Indexes into the 'icons' array in function below
#define YPOS   1
#define DELTAY 2

uint32_t x = 0;
uint32_t x_ave =0;
uint32_t x_old =0;
uint8_t Cart_x;
uint8_t Apple_x;
uint8_t Apple_y;
static int8_t Apple_y_new = 1;
uint8_t score = 0;
uint8_t TotalApples = 0;
int8_t f;

int ledState = WHITE;
unsigned long previousMillis = 0;
const long interval = 500;

static const unsigned char PROGMEM Apple[] = 
{
0x00, 0x04, 0x3F, 0x47, 0x47, 0x5F, 0x7F, 0x3F, 0x1B, 0x00, 0x00, 0x00, 0x00, 
};

static const unsigned char PROGMEM Cart[] =
{
0x00, 0x00, 0x70, 0x00, 0x1F, 0xFE, 0x01, 0x12, 0x0F, 0xFE, 0x09, 0x12, 0x09, 0x12, 0x0F, 0xFE,
0x0F, 0xFE, 0x0F, 0xFE, 0x08, 0x00, 0x00, 0x00, 0x06, 0x0C, 0x06, 0x0C, 0x00, 0x00, 
};

static const unsigned char PROGMEM Title_page[] =
{
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x9F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0x8F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0xBF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3F, 0xC0, 0x00, 0x03, 0xFF, 0xFC, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1F, 0xC0, 0x00, 0x07, 0xFF, 0xFE, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x7F, 0xC0, 0x00, 0x07, 0xFF, 0xFF, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x80, 0x00, 0x07, 0xFF, 0xFE, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x03, 0xFF, 0xFC, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xE0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x4F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xDF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0x00,
0x00, 0x00, 0x00, 0xDF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF1, 0xFC, 0x80, 0x00, 0x00,
0x00, 0x00, 0x00, 0x7F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF7, 0xFD, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xEF, 0xF3, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xDF, 0xEF, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xBF, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xFF, 0xFF, 0xFE, 0xFF, 0xE0, 0x00, 0x00,
0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xFF, 0xFF, 0xFE, 0xFF, 0xF0, 0x00, 0x00,
0x00, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xFF, 0xFF, 0xFE, 0xFF, 0xF0, 0x00, 0x00,
0x00, 0x4F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x0F, 0xFF, 0xF0, 0x00, 0x00,
0x00, 0xDF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x3F, 0xFF, 0xF0, 0x00, 0x00,
0x00, 0xDF, 0xF0, 0x70, 0x00, 0x08, 0x01, 0x07, 0x80, 0x00, 0x00, 0x1F, 0xFF, 0xC0, 0x00, 0x00,
0x00, 0x7F, 0xE0, 0x78, 0x00, 0x08, 0x01, 0x0E, 0x00, 0x00, 0x00, 0x3F, 0xFE, 0x40, 0x00, 0x00,
0x00, 0x3F, 0xC0, 0x78, 0x00, 0x08, 0x01, 0x1C, 0x00, 0x00, 0x01, 0xFF, 0xE7, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x03, 0xFF, 0x3F, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x38, 0x10, 0x08, 0x02, 0x78, 0x00, 0x00, 0x07, 0xFE, 0x3F, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x7F, 0xF8, 0x1F, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x7F, 0xC0, 0x1F, 0xF8, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x7F, 0xC0, 0x0F, 0xFC, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xC0, 0x03, 0xFE, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x03, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xFF, 0xCF, 0xFC, 0x00, 0x00, 0x01, 0xFF, 0x80, 0x00, 0xFF, 0xE0, 0x00,
0x00, 0x00, 0x00, 0x00, 0xE3, 0xCF, 0x1C, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x00, 0x3F, 0xE0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x7E, 0x01, 0xF8, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x1F, 0xC0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x08, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x08, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xE3, 0xC7, 0x88, 0xC0, 0x81, 0xCC, 0x79, 0xFC, 0xC0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xA3, 0x26, 0x49, 0x20, 0x81, 0x12, 0x6C, 0x24, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0xF2, 0x24, 0x49, 0xF0, 0xF9, 0x1F, 0x44, 0x66, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x12, 0x24, 0x49, 0x00, 0x81, 0x10, 0x44, 0xC3, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x1B, 0x26, 0x49, 0x20, 0x81, 0x12, 0x44, 0x83, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x03, 0x1B, 0xC7, 0x88, 0xE0, 0x81, 0x0E, 0x45, 0xF3, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const unsigned char PROGMEM Congrats_page[] =
{
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0xF8, 0x20, 0x18, 0x00, 0x00, 0x00, 0x78, 0x08, 0x00, 0x04,
0x00, 0xE0, 0x0E, 0x00, 0x60, 0xE0, 0xE0, 0x71, 0x18, 0x00, 0x00, 0x00, 0x30, 0x34, 0x00, 0x06,
0x00, 0x00, 0x00, 0x01, 0xE0, 0x00, 0xE0, 0x01, 0x03, 0xC0, 0x06, 0x80, 0x00, 0x78, 0x40, 0x00,
0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x70, 0x01, 0xC0, 0x02, 0x07, 0x80, 0x00, 0xE0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x60, 0x00, 0xF0, 0x03, 0x81, 0x10, 0x0D, 0x82, 0x01, 0xE0, 0x00, 0x0C,
0x00, 0x01, 0xC0, 0x01, 0xC0, 0x00, 0xF1, 0x03, 0x20, 0x80, 0x01, 0x03, 0x03, 0xC0, 0x00, 0x0E,
0x01, 0x87, 0xF8, 0x00, 0x00, 0x00, 0xA0, 0x03, 0x00, 0xE8, 0x03, 0x07, 0x03, 0x80, 0x00, 0x00,
0x01, 0x0E, 0x18, 0x10, 0x06, 0x08, 0x20, 0xF6, 0x10, 0x1C, 0x00, 0x3C, 0x85, 0x00, 0x00, 0x00,
0x00, 0x00, 0x10, 0x1C, 0x06, 0x07, 0x04, 0xFE, 0x01, 0x1A, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x10, 0x00, 0x00, 0x06, 0x0E, 0x6C, 0x0B, 0xB0, 0x00, 0x38, 0x0C, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x20, 0xEC, 0x00, 0x60, 0x0C, 0x1C, 0x08, 0x00, 0x00, 0x00,
0x00, 0x08, 0x20, 0x17, 0xE0, 0x64, 0x0D, 0xEC, 0x00, 0x61, 0x30, 0x38, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x08, 0x0F, 0xF8, 0x72, 0x03, 0xD8, 0x04, 0xC1, 0x78, 0x60, 0x00, 0x00, 0x01, 0xFC,
0x01, 0x00, 0x00, 0x1F, 0x38, 0x02, 0x07, 0x98, 0x01, 0xC0, 0xF0, 0xE0, 0x30, 0x00, 0x00, 0x38,
0x01, 0x01, 0x20, 0x7C, 0x01, 0x02, 0x06, 0x50, 0x03, 0x80, 0x60, 0x02, 0xC1, 0xC0, 0x01, 0x24,
0x03, 0xC1, 0x07, 0xF2, 0x00, 0x12, 0x06, 0x00, 0x01, 0x00, 0xE0, 0x38, 0x00, 0xD0, 0x00, 0x00,
0x07, 0x80, 0x0F, 0x80, 0x00, 0x00, 0x02, 0x07, 0x00, 0x00, 0x00, 0x20, 0x03, 0xE8, 0x00, 0x00,
0x00, 0x40, 0x00, 0x06, 0x80, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00,
0x00, 0x00, 0x00, 0x07, 0x00, 0x30, 0x00, 0x1E, 0x00, 0x00, 0x00, 0xE0, 0x3F, 0xF9, 0xC4, 0x00,
0x00, 0x80, 0x00, 0x00, 0x1F, 0xF0, 0x00, 0x3C, 0x00, 0x00, 0x00, 0xA0, 0x01, 0xE0, 0x10, 0x00,
0x01, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x78, 0x00, 0x00, 0x00, 0xE0, 0x00, 0xE0, 0x61, 0x0C,
0x10, 0x00, 0x18, 0x01, 0xE0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x03, 0xA0, 0xE0, 0xD0, 0x80, 0x18,
0x00, 0x02, 0x10, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x81, 0xEB, 0x70, 0xD0, 0x12, 0x00,
0x00, 0x00, 0x04, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x27, 0xC5, 0xEB, 0xE0, 0xB0, 0x00, 0x00,
0x00, 0x00, 0x06, 0x5F, 0x70, 0x00, 0x00, 0x0C, 0x62, 0x77, 0xD3, 0xBD, 0x50, 0xA0, 0x00, 0x01,
0x04, 0x00, 0x00, 0x07, 0xF0, 0x00, 0x0E, 0x1E, 0xF7, 0xFC, 0xF3, 0x27, 0x84, 0x20, 0x00, 0x00,
0x0E, 0x00, 0x00, 0x3E, 0xB0, 0x81, 0xDE, 0x1B, 0xF5, 0xF7, 0xF3, 0xA5, 0xE0, 0x00, 0x00, 0x08,
0x00, 0x1E, 0x1E, 0x1F, 0x11, 0xE0, 0xF7, 0x9F, 0xD7, 0x70, 0xA3, 0x23, 0xF0, 0x00, 0x24, 0x00,
0x01, 0x01, 0x00, 0x1D, 0x07, 0xE0, 0xFF, 0x8B, 0x93, 0xD3, 0xE1, 0xA1, 0xF8, 0xC0, 0x06, 0x04,
0x04, 0x00, 0x00, 0x15, 0x05, 0x78, 0xF7, 0x3A, 0xD7, 0x8F, 0xC3, 0x20, 0x75, 0x01, 0xFF, 0xC4,
0x00, 0x48, 0x00, 0x3D, 0x07, 0xB4, 0x97, 0x3A, 0xD7, 0x9D, 0xE3, 0xE4, 0x3D, 0xF0, 0x10, 0x00,
0x00, 0x20, 0x60, 0x3D, 0x03, 0xB4, 0x57, 0x3B, 0x87, 0x99, 0xEB, 0xE6, 0x75, 0x10, 0x01, 0x00,
0x02, 0x00, 0x01, 0xBD, 0x07, 0xBC, 0xD7, 0x6B, 0x67, 0x9F, 0xEB, 0xD3, 0xF8, 0x20, 0x3F, 0xC0,
0x00, 0x08, 0x18, 0x1D, 0x05, 0xAD, 0xD7, 0x79, 0xE6, 0x9D, 0xF9, 0x73, 0xE8, 0x7E, 0x00, 0x80,
0x00, 0x48, 0xC0, 0x0F, 0x27, 0xB5, 0x56, 0x5F, 0xE7, 0x1F, 0xF8, 0x92, 0x30, 0x00, 0x00, 0xE0,
0x20, 0x17, 0xC0, 0x1A, 0x97, 0x65, 0xD3, 0x5F, 0xE7, 0x45, 0xF8, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x21, 0xC0, 0x1F, 0xD7, 0xFD, 0xF7, 0x5D, 0xC7, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00,
0x03, 0x06, 0x01, 0x9F, 0x53, 0xC9, 0xB0, 0x45, 0x80, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x20, 0x0C,
0x80, 0x06, 0x04, 0x0F, 0xD1, 0x51, 0xF0, 0x02, 0xE0, 0x0C, 0x00, 0x00, 0x03, 0xFD, 0x13, 0x1E,
0x01, 0x00, 0x18, 0x07, 0x30, 0x60, 0x00, 0x1F, 0xE0, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x9F, 0x00,
0x03, 0x80, 0xC0, 0x03, 0x80, 0x00, 0x00, 0x1A, 0xA0, 0x0F, 0x00, 0x00, 0x00, 0x39, 0xBC, 0x00,
0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x40, 0x03, 0x80, 0x00, 0x00, 0x02, 0x0F, 0x00,
0x20, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0x80, 0x01, 0xE0, 0x00, 0x00, 0x42, 0x08, 0x00,
0x80, 0x3C, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0xF0, 0x1F, 0x00, 0x11, 0x83, 0xF8,
0x08, 0xF1, 0xE0, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x07, 0xF8, 0x04, 0x07, 0xEC,
0x20, 0x00, 0x00, 0xEE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x08, 0x3F, 0xC4, 0x1F, 0x06,
0x00, 0x00, 0x00, 0x0C, 0x07, 0x00, 0x00, 0x00, 0x00, 0x03, 0xD8, 0x00, 0xE0, 0xF4, 0x7C, 0x04,
0x00, 0x60, 0x00, 0x1C, 0x17, 0x00, 0x40, 0x20, 0x00, 0x00, 0x08, 0x04, 0x00, 0x0B, 0xF8, 0x00,
0x00, 0x00, 0x00, 0x18, 0x17, 0x00, 0x60, 0x70, 0x00, 0x60, 0x08, 0x02, 0x05, 0x01, 0x00, 0x08,
0x00, 0x00, 0x18, 0x10, 0x07, 0x00, 0x20, 0xF0, 0x00, 0x66, 0x1E, 0x11, 0x20, 0x00, 0x03, 0x0A,
0x00, 0x00, 0x08, 0x30, 0x47, 0x00, 0x20, 0x78, 0x00, 0xAE, 0x07, 0x03, 0xC2, 0x08, 0x07, 0x0A,
0x1C, 0x09, 0x03, 0x00, 0x0E, 0x01, 0x10, 0x3C, 0x00, 0x9F, 0xA1, 0xE6, 0xC0, 0x00, 0x00, 0x00,
0x04, 0x5F, 0x00, 0x00, 0x66, 0x00, 0x10, 0x1C, 0x00, 0x8B, 0xF8, 0xE0, 0x40, 0x88, 0x40, 0x00,
0x00, 0x3F, 0x03, 0x00, 0x06, 0x12, 0x18, 0x1E, 0x0C, 0x80, 0xFA, 0x20, 0x40, 0x00, 0x40, 0x00,
0x00, 0x38, 0x11, 0x08, 0x06, 0x50, 0x80, 0x1E, 0x08, 0x18, 0x1E, 0x04, 0x40, 0x24, 0x48, 0x00,
0x00, 0x04, 0x00, 0x1C, 0x06, 0x95, 0xC0, 0xCE, 0x00, 0x00, 0x07, 0x9C, 0x40, 0x40, 0x4C, 0x00,
0x00, 0x00, 0xF0, 0x00, 0x4E, 0x18, 0x04, 0x09, 0x02, 0x00, 0x3B, 0x80, 0x00, 0x80, 0x41, 0x00,
0x00, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x3E, 0x01, 0x12, 0x00, 0x01, 0x00, 0x22, 0x00, 0x44, 0x02,
0x00, 0xC3, 0x38, 0x01, 0xF8, 0x00, 0x1F, 0x00, 0x32, 0xDC, 0x00, 0x04, 0x00, 0x00, 0x08, 0xC0,
0x00, 0x00, 0x00, 0x00, 0x40, 0x06, 0x07, 0xC0, 0x8F, 0xC1, 0xF8, 0x0F, 0x01, 0xC0, 0x01, 0xE0,
0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x03, 0xE0, 0xC3, 0x00, 0x7A, 0x00, 0x00, 0x08, 0x20, 0x60,
0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x01, 0xF0, 0x42, 0x00, 0x5F, 0x00, 0x00, 0x08, 0x40, 0x50,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x08, 0x00
};

void Play();
void Title();
void Congrats();

void setup() {
  Serial.begin(9600);
  Wire.setClock(3400000);
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.display();
}

void loop() {
//Congrats();
//Title();
Play();
}

void Congrats() {
display.clearDisplay();
display.drawBitmap(0, 0, Congrats_page, 128, 64, WHITE);
display.invertDisplay(ledState);
display.display();

unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= interval) {
    // save the last time you blinked the LED
    previousMillis = currentMillis;

    // if the LED is off turn it on and vice-versa:
    if (ledState == LOW) {
      ledState = HIGH;
    } else {
      ledState = LOW;
    }
}}

void Title() {
display.clearDisplay();
display.drawBitmap(0, 0, Title_page, 128, 64, WHITE);
display.setTextSize(0); // Draw 2X-scale text
display.setTextColor(ledState);
display.setCursor(62, 0);
display.print(F("Press Start "));
display.display();

unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= interval) {
    // save the last time you blinked the LED
    previousMillis = currentMillis;

    // if the LED is off turn it on and vice-versa:
    if (ledState == WHITE) {
      ledState = BLACK;
    } else {
      ledState = WHITE;
    }
}}

void Play() {
  x = analogRead(A1);
  x_ave = .2*x + .8*x_old;
  x_old = x_ave;
  Cart_x = (map(x_ave , 0, 1023 , 98, 5 ));
  display.clearDisplay();
  display.setTextSize(0); // Draw 2X-scale text
  display.setTextColor(WHITE);
  display.setCursor(2, 2);
  display.print(F("Score: "));
  display.setCursor(38, 2);
  display.print(score);
  Serial.println(score);
  display.setCursor(83, 2);
  display.print(F("Level: "));
  display.setCursor(120, 2);
  display.print(Apple_y_new);
  display.drawBitmap(Cart_x, 45, Cart, 16, 15, WHITE);
  display.drawRect(0, 0, display.width(), 62, WHITE);
  

  if(TotalApples == 5){
Apple_y_new = Apple_y_new + 1;
TotalApples = 0;
  }
  if (Apple_y_new == 6) {
    Apple_y_new = 1;
  }
  
  for(f=0; f< 1; f++) {
    display.drawBitmap(Apple_x, Apple_y, Apple, 8, 9, WHITE);
    }

    display.display(); // Show the display buffer on the screen
    for(f=0; f< 1; f++) {
      Apple_y += Apple_y_new;
      if (Apple_x >= Cart_x && Apple_x <= (Cart_x + 16) && Apple_y >= 40) {
        score++;
      }
      // If snowflake is off the bottom of the screen...
      if (Apple_y >= 53 || (Apple_x >= Cart_x && Apple_x <= (Cart_x + 16) && Apple_y >= 40)) {
        Apple_x = random(11,102);
        Apple_y = 5;
        TotalApples++;
      }
    }

}

    

  



