/* Apple Frenzy */

/* Author: Lourdrigo de Castro*/

#include <Arduino.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire);

uint32_t x = 0; //value of potentiometer
uint32_t x_ave =0; //running average of the potentiometer value 
uint32_t x_old =0; //previous reading of the running average
uint8_t Cart_x; //cart position in x axis
uint8_t Apple_x = 11; //apple position in x axis
uint8_t Apple_y = 5; // apple position in y axis
static int8_t Apple_y_new = 1; // apple new position in y axis
uint8_t score = 0; // game score
uint8_t TotalApples = 0; // total apples per full game
uint8_t NumberofApples = 0; // total apples per game level
int8_t f; // used for for-loops
uint8_t S_button = 16; // button connected to pin 16
const uint32_t timeDebounce = 500; //debounce time
bool ButtonOn = LOW; // use to detect if the button is ON
bool CheckScore = LOW; // use to check score
bool CheckFinalScore = LOW; // use to check final score
int FontColor = WHITE; // font color
unsigned long previousMillis = 0; // will store last time the font color was updated
const long interval = 500; // interval at which the font change color

enum State{S_Start, S_Play, S_Score, S_Nextlevel, S_Pause}; // state variables
     State Current_state = S_Start; // initial state

static const unsigned char PROGMEM Apple[] = // Apple Bitmap
{
0x00, 0x04, 0x3F, 0x47, 0x47, 0x5F, 0x7F, 0x3F, 0x1B, 0x00, 0x00, 0x00, 0x00, 
};

static const unsigned char PROGMEM Cart[] = // Cart Bitmap
{
0x00, 0x00, 0x70, 0x00, 0x1F, 0xFE, 0x01, 0x12, 0x0F, 0xFE, 0x09, 0x12, 0x09, 0x12, 0x0F, 0xFE,
0x0F, 0xFE, 0x0F, 0xFE, 0x08, 0x00, 0x00, 0x00, 0x06, 0x0C, 0x06, 0x0C, 0x00, 0x00, 
};

static const unsigned char PROGMEM Title_page[] = // Title Page Bitmap
{
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x9F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0x8F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0xBF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3F, 0xC0, 0x00, 0x03, 0xFF, 0xFC, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1F, 0xC0, 0x00, 0x07, 0xFF, 0xFE, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x7F, 0xC0, 0x00, 0x07, 0xFF, 0xFF, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x80, 0x00, 0x07, 0xFF, 0xFE, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x03, 0xFF, 0xFC, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xE0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x4F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xDF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0x00,
0x00, 0x00, 0x00, 0xDF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF1, 0xFC, 0x80, 0x00, 0x00,
0x00, 0x00, 0x00, 0x7F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF7, 0xFD, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xEF, 0xF3, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xDF, 0xEF, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xBF, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xFF, 0xFF, 0xFE, 0xFF, 0xE0, 0x00, 0x00,
0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xFF, 0xFF, 0xFE, 0xFF, 0xF0, 0x00, 0x00,
0x00, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xFF, 0xFF, 0xFE, 0xFF, 0xF0, 0x00, 0x00,
0x00, 0x4F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x0F, 0xFF, 0xF0, 0x00, 0x00,
0x00, 0xDF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x3F, 0xFF, 0xF0, 0x00, 0x00,
0x00, 0xDF, 0xF0, 0x70, 0x00, 0x08, 0x01, 0x07, 0x80, 0x00, 0x00, 0x1F, 0xFF, 0xC0, 0x00, 0x00,
0x00, 0x7F, 0xE0, 0x78, 0x00, 0x08, 0x01, 0x0E, 0x00, 0x00, 0x00, 0x3F, 0xFE, 0x40, 0x00, 0x00,
0x00, 0x3F, 0xC0, 0x78, 0x00, 0x08, 0x01, 0x1C, 0x00, 0x00, 0x01, 0xFF, 0xE7, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x03, 0xFF, 0x3F, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x38, 0x10, 0x08, 0x02, 0x78, 0x00, 0x00, 0x07, 0xFE, 0x3F, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x7F, 0xF8, 0x1F, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x7F, 0xC0, 0x1F, 0xF8, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x7F, 0xC0, 0x0F, 0xFC, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xC0, 0x03, 0xFE, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x03, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xFF, 0xCF, 0xFC, 0x00, 0x00, 0x01, 0xFF, 0x80, 0x00, 0xFF, 0xE0, 0x00,
0x00, 0x00, 0x00, 0x00, 0xE3, 0xCF, 0x1C, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x00, 0x3F, 0xE0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x7E, 0x01, 0xF8, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x1F, 0xC0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x08, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x08, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xE3, 0xC7, 0x88, 0xC0, 0x81, 0xCC, 0x79, 0xFC, 0xC0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xA3, 0x26, 0x49, 0x20, 0x81, 0x12, 0x6C, 0x24, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0xF2, 0x24, 0x49, 0xF0, 0xF9, 0x1F, 0x44, 0x66, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x12, 0x24, 0x49, 0x00, 0x81, 0x10, 0x44, 0xC3, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x1B, 0x26, 0x49, 0x20, 0x81, 0x12, 0x44, 0x83, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x03, 0x1B, 0xC7, 0x88, 0xE0, 0x81, 0x0E, 0x45, 0xF3, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const unsigned char PROGMEM Congrats_page[] = // Congratulation page Bitmap
{
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0xF8, 0x20, 0x18, 0x00, 0x00, 0x00, 0x78, 0x08, 0x00, 0x04,
0x00, 0xE0, 0x0E, 0x00, 0x60, 0xE0, 0xE0, 0x71, 0x18, 0x00, 0x00, 0x00, 0x30, 0x34, 0x00, 0x06,
0x00, 0x00, 0x00, 0x01, 0xE0, 0x00, 0xE0, 0x01, 0x03, 0xC0, 0x06, 0x80, 0x00, 0x78, 0x40, 0x00,
0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x70, 0x01, 0xC0, 0x02, 0x07, 0x80, 0x00, 0xE0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x60, 0x00, 0xF0, 0x03, 0x81, 0x10, 0x0D, 0x82, 0x01, 0xE0, 0x00, 0x0C,
0x00, 0x01, 0xC0, 0x01, 0xC0, 0x00, 0xF1, 0x03, 0x20, 0x80, 0x01, 0x03, 0x03, 0xC0, 0x00, 0x0E,
0x01, 0x87, 0xF8, 0x00, 0x00, 0x00, 0xA0, 0x03, 0x00, 0xE8, 0x03, 0x07, 0x03, 0x80, 0x00, 0x00,
0x01, 0x0E, 0x18, 0x10, 0x06, 0x08, 0x20, 0xF6, 0x10, 0x1C, 0x00, 0x3C, 0x85, 0x00, 0x00, 0x00,
0x00, 0x00, 0x10, 0x1C, 0x06, 0x07, 0x04, 0xFE, 0x01, 0x1A, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x10, 0x00, 0x00, 0x06, 0x0E, 0x6C, 0x0B, 0xB0, 0x00, 0x38, 0x0C, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x20, 0xEC, 0x00, 0x60, 0x0C, 0x1C, 0x08, 0x00, 0x00, 0x00,
0x00, 0x08, 0x20, 0x17, 0xE0, 0x64, 0x0D, 0xEC, 0x00, 0x61, 0x30, 0x38, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x08, 0x0F, 0xF8, 0x72, 0x03, 0xD8, 0x04, 0xC1, 0x78, 0x60, 0x00, 0x00, 0x01, 0xFC,
0x01, 0x00, 0x00, 0x1F, 0x38, 0x02, 0x07, 0x98, 0x01, 0xC0, 0xF0, 0xE0, 0x30, 0x00, 0x00, 0x38,
0x01, 0x01, 0x20, 0x7C, 0x01, 0x02, 0x06, 0x50, 0x03, 0x80, 0x60, 0x02, 0xC1, 0xC0, 0x01, 0x24,
0x03, 0xC1, 0x07, 0xF2, 0x00, 0x12, 0x06, 0x00, 0x01, 0x00, 0xE0, 0x38, 0x00, 0xD0, 0x00, 0x00,
0x07, 0x80, 0x0F, 0x80, 0x00, 0x00, 0x02, 0x07, 0x00, 0x00, 0x00, 0x20, 0x03, 0xE8, 0x00, 0x00,
0x00, 0x40, 0x00, 0x06, 0x80, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00,
0x00, 0x00, 0x00, 0x07, 0x00, 0x30, 0x00, 0x1E, 0x00, 0x00, 0x00, 0xE0, 0x3F, 0xF9, 0xC4, 0x00,
0x00, 0x80, 0x00, 0x00, 0x1F, 0xF0, 0x00, 0x3C, 0x00, 0x00, 0x00, 0xA0, 0x01, 0xE0, 0x10, 0x00,
0x01, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x78, 0x00, 0x00, 0x00, 0xE0, 0x00, 0xE0, 0x61, 0x0C,
0x10, 0x00, 0x18, 0x01, 0xE0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x03, 0xA0, 0xE0, 0xD0, 0x80, 0x18,
0x00, 0x02, 0x10, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x81, 0xEB, 0x70, 0xD0, 0x12, 0x00,
0x00, 0x00, 0x04, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x27, 0xC5, 0xEB, 0xE0, 0xB0, 0x00, 0x00,
0x00, 0x00, 0x06, 0x5F, 0x70, 0x00, 0x00, 0x0C, 0x62, 0x77, 0xD3, 0xBD, 0x50, 0xA0, 0x00, 0x01,
0x04, 0x00, 0x00, 0x07, 0xF0, 0x00, 0x0E, 0x1E, 0xF7, 0xFC, 0xF3, 0x27, 0x84, 0x20, 0x00, 0x00,
0x0E, 0x00, 0x00, 0x3E, 0xB0, 0x81, 0xDE, 0x1B, 0xF5, 0xF7, 0xF3, 0xA5, 0xE0, 0x00, 0x00, 0x08,
0x00, 0x1E, 0x1E, 0x1F, 0x11, 0xE0, 0xF7, 0x9F, 0xD7, 0x70, 0xA3, 0x23, 0xF0, 0x00, 0x24, 0x00,
0x01, 0x01, 0x00, 0x1D, 0x07, 0xE0, 0xFF, 0x8B, 0x93, 0xD3, 0xE1, 0xA1, 0xF8, 0xC0, 0x06, 0x04,
0x04, 0x00, 0x00, 0x15, 0x05, 0x78, 0xF7, 0x3A, 0xD7, 0x8F, 0xC3, 0x20, 0x75, 0x01, 0xFF, 0xC4,
0x00, 0x48, 0x00, 0x3D, 0x07, 0xB4, 0x97, 0x3A, 0xD7, 0x9D, 0xE3, 0xE4, 0x3D, 0xF0, 0x10, 0x00,
0x00, 0x20, 0x60, 0x3D, 0x03, 0xB4, 0x57, 0x3B, 0x87, 0x99, 0xEB, 0xE6, 0x75, 0x10, 0x01, 0x00,
0x02, 0x00, 0x01, 0xBD, 0x07, 0xBC, 0xD7, 0x6B, 0x67, 0x9F, 0xEB, 0xD3, 0xF8, 0x20, 0x3F, 0xC0,
0x00, 0x08, 0x18, 0x1D, 0x05, 0xAD, 0xD7, 0x79, 0xE6, 0x9D, 0xF9, 0x73, 0xE8, 0x7E, 0x00, 0x80,
0x00, 0x48, 0xC0, 0x0F, 0x27, 0xB5, 0x56, 0x5F, 0xE7, 0x1F, 0xF8, 0x92, 0x30, 0x00, 0x00, 0xE0,
0x20, 0x17, 0xC0, 0x1A, 0x97, 0x65, 0xD3, 0x5F, 0xE7, 0x45, 0xF8, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x21, 0xC0, 0x1F, 0xD7, 0xFD, 0xF7, 0x5D, 0xC7, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00,
0x03, 0x06, 0x01, 0x9F, 0x53, 0xC9, 0xB0, 0x45, 0x80, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x20, 0x0C,
0x80, 0x06, 0x04, 0x0F, 0xD1, 0x51, 0xF0, 0x02, 0xE0, 0x0C, 0x00, 0x00, 0x03, 0xFD, 0x13, 0x1E,
0x01, 0x00, 0x18, 0x07, 0x30, 0x60, 0x00, 0x1F, 0xE0, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x9F, 0x00,
0x03, 0x80, 0xC0, 0x03, 0x80, 0x00, 0x00, 0x1A, 0xA0, 0x0F, 0x00, 0x00, 0x00, 0x39, 0xBC, 0x00,
0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x40, 0x03, 0x80, 0x00, 0x00, 0x02, 0x0F, 0x00,
0x20, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0x80, 0x01, 0xE0, 0x00, 0x00, 0x42, 0x08, 0x00,
0x80, 0x3C, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0xF0, 0x1F, 0x00, 0x11, 0x83, 0xF8,
0x08, 0xF1, 0xE0, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x07, 0xF8, 0x04, 0x07, 0xEC,
0x20, 0x00, 0x00, 0xEE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x08, 0x3F, 0xC4, 0x1F, 0x06,
0x00, 0x00, 0x00, 0x0C, 0x07, 0x00, 0x00, 0x00, 0x00, 0x03, 0xD8, 0x00, 0xE0, 0xF4, 0x7C, 0x04,
0x00, 0x60, 0x00, 0x1C, 0x17, 0x00, 0x40, 0x20, 0x00, 0x00, 0x08, 0x04, 0x00, 0x0B, 0xF8, 0x00,
0x00, 0x00, 0x00, 0x18, 0x17, 0x00, 0x60, 0x70, 0x00, 0x60, 0x08, 0x02, 0x05, 0x01, 0x00, 0x08,
0x00, 0x00, 0x18, 0x10, 0x07, 0x00, 0x20, 0xF0, 0x00, 0x66, 0x1E, 0x11, 0x20, 0x00, 0x03, 0x0A,
0x00, 0x00, 0x08, 0x30, 0x47, 0x00, 0x20, 0x78, 0x00, 0xAE, 0x07, 0x03, 0xC2, 0x08, 0x07, 0x0A,
0x1C, 0x09, 0x03, 0x00, 0x0E, 0x01, 0x10, 0x3C, 0x00, 0x9F, 0xA1, 0xE6, 0xC0, 0x00, 0x00, 0x00,
0x04, 0x5F, 0x00, 0x00, 0x66, 0x00, 0x10, 0x1C, 0x00, 0x8B, 0xF8, 0xE0, 0x40, 0x88, 0x40, 0x00,
0x00, 0x3F, 0x03, 0x00, 0x06, 0x12, 0x18, 0x1E, 0x0C, 0x80, 0xFA, 0x20, 0x40, 0x00, 0x40, 0x00,
0x00, 0x38, 0x11, 0x08, 0x06, 0x50, 0x80, 0x1E, 0x08, 0x18, 0x1E, 0x04, 0x40, 0x24, 0x48, 0x00,
0x00, 0x04, 0x00, 0x1C, 0x06, 0x95, 0xC0, 0xCE, 0x00, 0x00, 0x07, 0x9C, 0x40, 0x40, 0x4C, 0x00,
0x00, 0x00, 0xF0, 0x00, 0x4E, 0x18, 0x04, 0x09, 0x02, 0x00, 0x3B, 0x80, 0x00, 0x80, 0x41, 0x00,
0x00, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x3E, 0x01, 0x12, 0x00, 0x01, 0x00, 0x22, 0x00, 0x44, 0x02,
0x00, 0xC3, 0x38, 0x01, 0xF8, 0x00, 0x1F, 0x00, 0x32, 0xDC, 0x00, 0x04, 0x00, 0x00, 0x08, 0xC0,
0x00, 0x00, 0x00, 0x00, 0x40, 0x06, 0x07, 0xC0, 0x8F, 0xC1, 0xF8, 0x0F, 0x01, 0xC0, 0x01, 0xE0,
0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x03, 0xE0, 0xC3, 0x00, 0x7A, 0x00, 0x00, 0x08, 0x20, 0x60,
0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x01, 0xF0, 0x42, 0x00, 0x5F, 0x00, 0x00, 0x08, 0x40, 0x50,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x08, 0x00
};

void Play(); // Gameplay function
void Title(); // Title Page Function
void Congrats(); // Congrats Page Function
void ISR_Start(); // Start Function

void setup() {
  pinMode(S_button, INPUT_PULLUP); // set the digital pin as input and enable internal pullup resistor
  attachInterrupt(digitalPinToInterrupt(S_button), ISR_Start, FALLING); // attached interrupt to call ISR_Start()
  Serial.begin(9600); // sets the data transmission speed
  Wire.setClock(3400000); // sets the I2C clock frequency
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); //Initializes the interface to the OLED screen
}

void loop() {
switch (Current_state){ // switch function 
  case S_Start:{ // state S_Start
    Title(); // Call Title()
    score = 0; // Reset score
    TotalApples = 0; // Reset Totalapples
    Apple_y_new = 1; // Reset Apple_y_new
    if(ButtonOn == HIGH){ // checks the ButtonOn State
      Current_state = S_Play; // Sets the Current_state to S_Play
    }
  break; // exit
  }

  case S_Play:{ // state S_Play
    Play(); // Call Play()
    if(ButtonOn == HIGH){ // checks the ButtonOn State
      Current_state = S_Pause; // Sets the Current_state to S_Pause
    }
    if(CheckScore == HIGH){ // Checks the CheckScore State 
      Current_state = S_Nextlevel;// Sets the Current_state to S_Nextlevel
    }
    if(CheckFinalScore == HIGH){ // Checks the CheckFinalScore state
      Current_state = S_Score;// Sets the Current_state to S_Score
    }
  break; // exits
  }

  case S_Pause:{ // state S_Pause
    ButtonOn = LOW; // sets the ButtonOn to low
    display.setTextSize(0); // text size
    display.setTextColor(FontColor); // text Color
    display.setCursor(40, 20); // Text position
    display.print(F("PAUSED")); // display text
    display.display(); // update display

    unsigned long currentMillis = millis(); //sets the current time in millisecond

    if (currentMillis - previousMillis >= interval) { // comparing the difference between current time and previous time to interval
      previousMillis = currentMillis; // save the last time the fontcolor change
      if (FontColor == WHITE) { // Change font color white to black and vice versa
        FontColor = BLACK;
      } else {
          FontColor = WHITE;
        }
    }
    
    if  (ButtonOn == HIGH){ //checks the ButtonOn state
      Current_state = S_Play;// sets the Current_state to S_Play
    }  
  break; // exit
  }

  case S_Nextlevel:{ // State S_Nextlevel
    CheckScore = LOW;// sets the CheckScore to low
    if  (score >= TotalApples/2 ) { // checks the score if its equal or more than half of the TotalApples
      Congrats(); // Call Congrats()
      if  (ButtonOn == HIGH){ // Checks the ButtonOn State
        Current_state = S_Play; // sets the Current_state to S_Play
      } 
    } else {
        display.clearDisplay(); // clear the display
        display.setTextSize(2); // text size
        display.setTextColor(FontColor); // text color
        display.setCursor(40, 10); //text position 
        display.println(F("Game")); // display text
        display.setCursor(40, 30);// text position
        display.println(F("Over"));//display text
        display.display();// update display

        unsigned long currentMillis = millis();//sets the current time in millisecond

        if (currentMillis - previousMillis >= interval) {// comparing the difference between current time and previous time to interval
          previousMillis = currentMillis;// save the last time the fontcolor change
          if (FontColor == WHITE) {// Change font color white to black and vice versa
            FontColor = BLACK;
          } else {
              FontColor = WHITE;
            }
        }

       if (ButtonOn == HIGH){//checks the ButtonOn state
        Current_state = S_Start;// sets the Current_state to S_Start
       }
      }
    break;//exit
    }

  case S_Score:{ // State S_Score
    CheckFinalScore = LOW; // sets the CheckFinalScore to low
    display.clearDisplay(); // clear the display
    display.setTextSize(1); // text size
    display.setTextColor(FontColor); // Text color
    display.setCursor(35, 10); // text position
    display.print(F("Your Score")); // disply text
    display.setTextSize(2); // text size
    display.setTextColor(FontColor); //text color
    display.setCursor(55, 30);//text position
    display.print((score)); // display score
    display.display();//update display

    unsigned long currentMillis = millis();//sets the current time in millisecond

    if (currentMillis - previousMillis >= interval) {// comparing the difference between current time and previous time to interval
          previousMillis = currentMillis;// save the last time the fontcolor change
          if (FontColor == WHITE) {// Change font color white to black and vice versa
            FontColor = BLACK;
          } else {
              FontColor = WHITE;
            }
        }
    if (ButtonOn == HIGH){//checks the ButtonOn state
          Current_state = S_Start;// sets the Current_state to S_Start
         }
        }
      break; // exit
      }
}

void Congrats() {
  display.clearDisplay();// clear the display
  display.drawBitmap(0, 0, Congrats_page, 128, 64, WHITE);// draw the Congrats_page bitmap
  display.invertDisplay(FontColor); //invert colors
  display.display();//update display

  unsigned long currentMillis = millis();//sets the current time in millisecond

  if (currentMillis - previousMillis >= interval) {// comparing the difference between current time and previous time to interval
          previousMillis = currentMillis;// save the last time the fontcolor change
          if (FontColor == WHITE) {// Change color white to black and vice versa
            FontColor = BLACK;
          } else {
              FontColor = WHITE;
            }
        }
}

void Title() {
  ButtonOn = LOW;//sets the ButtonOn State to low
  display.clearDisplay();// clear the display
  display.drawBitmap(0, 0, Title_page, 128, 64, WHITE);// draw the Title_page bitmap
  display.setTextSize(0); // text size
  display.setTextColor(FontColor); //text color
  display.setCursor(62, 0);// text position
  display.print(F("Press Start "));//display text
  display.display();//update display

  unsigned long currentMillis = millis();//sets the current time in millisecond

  if (currentMillis - previousMillis >= interval) {// comparing the difference between current time and previous time to interval
          previousMillis = currentMillis;// save the last time the fontcolor change
          if (FontColor == WHITE) {// Change Fontcolor white to black and vice versa
            FontColor = BLACK;
          } else {
              FontColor = WHITE;
            }
        }
}

void Play() {
  ButtonOn = LOW;//sets the ButtonOn State to low
  x = analogRead(A1);//reads value in A1
  x_ave = .2*x + .8*x_old;// running average of the potentiometer
  x_old = x_ave;//saves the last value of x
  Cart_x = (map(x_ave , 0, 1023 , 5, 98 ));// map value of the potentometer
  display.invertDisplay(LOW); //sets the color of display to black
  display.clearDisplay();// clear the display
  display.setTextSize(0); // text size
  display.setTextColor(WHITE);// text color
  display.setCursor(2, 2);//text position
  display.print(F("Score: "));//display text
  display.setCursor(38, 2);//text position
  display.print(score);//display score
  display.setCursor(83, 2);//text position
  display.print(F("Level: "));//display text
  display.setCursor(120, 2);//text position
  display.print(Apple_y_new);//display level
  display.drawBitmap(Cart_x, 45, Cart, 16, 15, WHITE);// draw the Cart bitmap
  display.drawRect(0, 0, display.width(), 62, WHITE);// draw border
  
  if  (NumberofApples == 10){ // check if number of apples reached 10
    Apple_y_new = Apple_y_new + 1;// add 1 level 
    NumberofApples = 0;// reset NmberofApples
    CheckScore = HIGH;//sets the checkscore to high
    }
  if (Apple_y_new == 6) {// check if Apple_y_new reached 6
    Apple_y_new = 1;// resets Apple_y_new
    CheckFinalScore = HIGH;// Sets the CheckinalScore to High
    CheckScore = LOW;//Sets the CheckScore to Low
    }
  
  for (f=0; f< 1; f++) { //Initialize apple 
    display.drawBitmap(Apple_x, Apple_y, Apple, 8, 9, WHITE);//draw Apple Bitmap
    }
  display.display(); //Update display
    
  for(f=0; f< 1; f++) { // initialize next apple position
    Apple_y += Apple_y_new; // next y position of the apple
    if (Apple_x >= Cart_x && Apple_x <= (Cart_x + 16) && Apple_y >= 40) {// check if the apple position is same with the cart position
      score++;// add score
      }
    if (Apple_y >= 53 || (Apple_x >= Cart_x && Apple_x <= (Cart_x + 16) && Apple_y >= 40)) {//check if the apple reached the end of the sreen
      Apple_x = random(11,102); // produce random x-axis position
      Apple_y = 5;//set y-axis position to 5
      NumberofApples++;// add NumberofApples
      TotalApples++;//add TotalApples
      }
    }
}

void ISR_Start(){
 uint32_t timeNewKeyPress = millis(); // set the time the S_button is not pressed
 static uint32_t timeLastKeyPress = 0; //time the S_button is pressed
 if ( timeNewKeyPress - timeLastKeyPress >= timeDebounce) { // equating to the timeDebounce              
    ButtonOn = !ButtonOn; //sets the state of the button everytime the SS_button is pressed
    }
    timeLastKeyPress = timeNewKeyPress; //reset the debouncing timer
}